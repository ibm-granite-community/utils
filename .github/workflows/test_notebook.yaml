# SPDX-License-Identifier: Apache-2.0

name: Test Notebook Reusable Workflow

on:
  workflow_call:
    inputs:
      notebook-lists:
        description: 'Newline-separated paths of text files with newline-separated paths of notebooks to test'
        required: false
        type: string
        default: ''
      notebook:
        description: 'Newline-separated paths of notebooks to test'
        required: false
        type: string
        default: ''
      runs-on:
        description: 'Space-separated GitHub Action runner names to use'
        required: false
        type: string
        default: >-
          ubuntu-latest
      python-versions:
        description: 'Space-separated Python versions to use'
        required: false
        type: string
        default: >-
          3.11
      pip-install:
        description: 'Space-separated dependencies to pip install'
        required: false
        type: string
        default: >-
          nbconvert
          nbclient
          ipykernel
      command:
        description: 'Newline-separated commands to test notebook'
        required: false
        type: string
        default: |
          jupyter nbconvert --to notebook --execute --inplace {0}
      ref:
        description: 'Git ref to checkout'
        required: false
        type: string
        default: ''
      all:
        description: 'Whether to test all notebooks or just changed notebooks'
        required: false
        type: boolean
        default: ${{ contains(fromJSON('["schedule","workflow_dispatch"]'), github.event_name) }}
      action:
        description: 'Path to a folder with a composite action containing additional test setup'
        required: false
        type: string
        default: ''

env:
  LC_ALL: en_US.UTF-8

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      test: ${{ fromJSON(inputs.all) || steps.changed-files.outputs.any_changed }}
      notebooks: ${{ steps.json.outputs.notebooks }}
      runs_on: ${{ steps.json.outputs.runs_on }}
      python_versions: ${{ steps.json.outputs.python_versions }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Find all notebook files
        if: ${{ fromJSON(inputs.all) }}
        id: all-files
        uses: tj-actions/glob@v22
        with:
          files-from-source-file: ${{ inputs.notebook-lists }}
          files: ${{ inputs.notebook }}

      - name: Find changed notebook files
        if: ${{ !fromJSON(inputs.all) }}
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          files_from_source_file: ${{ inputs.notebook-lists }}
          files: ${{ inputs.notebook }}

      - name: Convert inputs to JSON
        id: json
        run: |
          jq -ncr '[$ARGS.positional[] | split("\\s"; null) | map(select(. != ""))] | flatten | tostring | ("notebooks=" + .)' --args "${{ fromJSON(inputs.all) && steps.all-files.outputs.paths || steps.changed-files.outputs.all_changed_files }}" >> "$GITHUB_OUTPUT"
          jq -ncr '[$ARGS.positional[] | split("\\s"; null) | map(select(. != ""))] | flatten | tostring | ("runs_on=" + .)' --args "${{ inputs.runs-on }}" >> "$GITHUB_OUTPUT"
          jq -ncr '[$ARGS.positional[] | split("\\s"; null) | map(select(. != ""))] | flatten | tostring | ("python_versions=" + .)' --args "${{ inputs.python-versions }}" >> "$GITHUB_OUTPUT"

  test:
    needs:
      - prepare
    if: ${{ fromJSON(needs.prepare.outputs.test) }}
    strategy:
      fail-fast: false
      matrix:
        notebook: ${{ fromJSON(needs.prepare.outputs.notebooks) }}
        os: ${{ fromJSON(needs.prepare.outputs.runs_on) }}
        python: ${{ fromJSON(needs.prepare.outputs.python_versions) }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Prepare Additional Test Setup action
        if: ${{ inputs.action && hashFiles(format('{0}/action.yml',inputs.action),format('{0}/action.yaml',inputs.action)) }}
        run: |
          mkdir -p .github/tmp/actions/test-setup
          echo '*' > .github/tmp/.gitignore
          cp -Rpv "${{ inputs.action }}"/* .github/tmp/actions/test-setup

      - name: Additional Test Setup
        if: ${{ hashFiles('.github/tmp/actions/test-setup/action.yml','.github/tmp/actions/test-setup/action.yaml') }}
        uses: ./.github/tmp/actions/test-setup

      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install ${{ inputs.pip-install }}

      - name: Test ${{ matrix.notebook }}
        run: |
          ${{ format(inputs.command, matrix.notebook) }}
        env:
          GRANITE_TESTING: ${{ vars.GRANITE_TESTING }}
          REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
          WATSONX_APIKEY: ${{ secrets.WATSONX_APIKEY }}
          WATSONX_PROJECT_ID: ${{ secrets.WATSONX_PROJECT_ID }}
          WATSONX_URL: ${{ secrets.WATSONX_URL }}
